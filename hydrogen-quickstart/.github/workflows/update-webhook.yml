name: Update Webhook Subscription

on:
  deployment_status:
    types: [created]
  workflow_dispatch:
    inputs:
      deployment_url:
        description: 'Deployment URL (optional)'
        required: false
        type: string

jobs:
  update-webhook:
    if: github.event.deployment_status.state == 'success' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Get deployment URL
        id: get-url
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.deployment_url }}" ]; then
            echo "url=${{ github.event.inputs.deployment_url }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ github.event.deployment_status.target_url }}" ]; then
            echo "url=${{ github.event.deployment_status.target_url }}" >> $GITHUB_OUTPUT
          else
            echo "No deployment URL found"
            exit 1
          fi
      
      - name: Update Shopify webhook
        env:
          SHOPIFY_ADMIN_API_ACCESS_TOKEN: ${{ secrets.SHOPIFY_ADMIN_API_ACCESS_TOKEN }}
          PUBLIC_STORE_DOMAIN: ${{ secrets.PUBLIC_STORE_DOMAIN }}
          DEPLOYMENT_URL: ${{ steps.get-url.outputs.url }}
        run: |
          # Install GraphQL client
          npm install graphql graphql-request
          
          # Create update script
          cat > update-webhook.js << 'EOF'
          const { GraphQLClient, gql } = require('graphql-request');
          
          const client = new GraphQLClient(
            `https://${process.env.PUBLIC_STORE_DOMAIN}/admin/api/2024-01/graphql.json`,
            {
              headers: {
                'X-Shopify-Access-Token': process.env.SHOPIFY_ADMIN_API_ACCESS_TOKEN,
              },
            }
          );
          
          const FIND_WEBHOOK_QUERY = gql`
            query webhookSubscriptions($first: Int!) {
              webhookSubscriptions(first: $first) {
                edges {
                  node {
                    id
                    topic
                    endpoint {
                      ... on WebhookHttpEndpoint {
                        callbackUrl
                      }
                    }
                  }
                }
              }
            }
          `;
          
          const UPDATE_WEBHOOK_MUTATION = gql`
            mutation webhookSubscriptionUpdate($id: ID!, $webhookSubscription: WebhookSubscriptionInput!) {
              webhookSubscriptionUpdate(id: $id, webhookSubscription: $webhookSubscription) {
                webhookSubscription {
                  id
                  topic
                  endpoint {
                    ... on WebhookHttpEndpoint {
                      callbackUrl
                    }
                  }
                }
                userErrors {
                  field
                  message
                }
              }
            }
          `;
          
          const CREATE_WEBHOOK_MUTATION = gql`
            mutation webhookSubscriptionCreate($topic: WebhookSubscriptionTopic!, $webhookSubscription: WebhookSubscriptionInput!) {
              webhookSubscriptionCreate(topic: $topic, webhookSubscription: $webhookSubscription) {
                webhookSubscription {
                  id
                  topic
                  endpoint {
                    ... on WebhookHttpEndpoint {
                      callbackUrl
                    }
                  }
                }
                userErrors {
                  field
                  message
                }
              }
            }
          `;
          
          async function updateWebhook() {
            const callbackUrl = `${process.env.DEPLOYMENT_URL}/webhooks`;
            console.log(`Updating webhook to: ${callbackUrl}`);
            
            // Find existing webhook
            const { webhookSubscriptions } = await client.request(FIND_WEBHOOK_QUERY, { first: 100 });
            const bulkOpsWebhook = webhookSubscriptions.edges.find(
              edge => edge.node.topic === 'BULK_OPERATIONS_FINISH'
            );
            
            if (bulkOpsWebhook) {
              // Update existing webhook
              const { webhookSubscriptionUpdate } = await client.request(UPDATE_WEBHOOK_MUTATION, {
                id: bulkOpsWebhook.node.id,
                webhookSubscription: {
                  callbackUrl,
                  format: 'JSON'
                }
              });
              
              if (webhookSubscriptionUpdate.userErrors.length > 0) {
                throw new Error(webhookSubscriptionUpdate.userErrors[0].message);
              }
              
              console.log('Webhook updated successfully:', webhookSubscriptionUpdate.webhookSubscription.id);
            } else {
              // Create new webhook
              const { webhookSubscriptionCreate } = await client.request(CREATE_WEBHOOK_MUTATION, {
                topic: 'BULK_OPERATIONS_FINISH',
                webhookSubscription: {
                  callbackUrl,
                  format: 'JSON'
                }
              });
              
              if (webhookSubscriptionCreate.userErrors.length > 0) {
                throw new Error(webhookSubscriptionCreate.userErrors[0].message);
              }
              
              console.log('Webhook created successfully:', webhookSubscriptionCreate.webhookSubscription.id);
            }
          }
          
          updateWebhook().catch(console.error);
          EOF
          
          # Run the script
          node update-webhook.js